import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import datetime
import os
import json
import glob

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from config import Config
from categories import CATEGORIES_DATA, PEOPLE_ITEMS, ONLINE_COMBO_ITEMS, INVITATION_ITEMS
from models import SessionStates

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
from config import Config
Config.create_folders()

# ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ======
if not Config.BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {Config.BOT_TOKEN[:10]}...")

# ====== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ======
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def format_currency(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return f"{amount:,.0f}‚Ç∏".replace(",", ".")

def validate_amount(text: str) -> tuple[bool, int | None]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ)"""
    try:
        amount = int(text)
        return True, amount
    except ValueError:
        return False, None

async def safe_edit_message(message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback"""
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await message.answer(text, reply_markup=reply_markup)

def save_session_report(session_data: dict) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–º–µ–Ω–µ –≤ —Ñ–∞–π–ª"""
    try:
        filename = f"{Config.CLOSED_SESSIONS_FOLDER}/—Å–º–µ–Ω–∞_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        report_content = f"""–ê—Å—Ç–∞–Ω–∞, ¬´–ö–æ—Å–º–æ–ø–∞—Ä–∫ 01¬ª
–°–º–µ–Ω–∞ –æ—Ç: {session_data['open_time'].strftime('%d.%m.%Y %H:%M')}
–ó–∞–∫—Ä—ã—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(session_data['close_time'] - session_data['open_time']).split('.')[0]}

{session_data['combined_report']}

{session_data['metrics_report']}

{session_data['receipts_report']}
"""
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def get_closed_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"""
    sessions = []
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ txt —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω
        pattern = f"{Config.CLOSED_SESSIONS_FOLDER}/—Å–º–µ–Ω–∞_*.txt"
        files = glob.glob(pattern)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.datetime.now() - datetime.timedelta(days=30)
        
        for filepath in files:
            try:
                filename = os.path.basename(filepath)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                date_str = filename.replace('—Å–º–µ–Ω–∞_', '').replace('.txt', '')[:8]
                file_date = datetime.datetime.strptime(date_str, '%Y%m%d')
                
                if file_date >= thirty_days_ago:
                    sessions.append({
                        'filename': filename,
                        'filepath': filepath,
                        'date': file_date,
                        'display_date': file_date.strftime('%d.%m.%Y')
                    })
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sessions.sort(key=lambda x: x['date'], reverse=True)
        return sessions
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω: {e}")
        return []

# ====== –î–ê–ù–ù–´–ï –°–ú–ï–ù–´ –ò –ë–≠–ö–ê–ü–´ ======
class SessionManager:
    def __init__(self):
        self.is_open = False
        self.sales = []
        self.cart = []
        self.mixed_amount = None
        self.custom_item_temp = None
        self.item_mapping = {}
        self.open_time = None
        self.last_report_type = None
        self.exchange_cash = 0
        self.auto_save_task = None
    
    def reset(self):
        self.is_open = False
        self.sales = []
        self.cart = []
        self.mixed_amount = None
        self.custom_item_temp = None
        self.open_time = None
        self.last_report_type = None
        self.exchange_cash = 0
    
    def get_cart_total(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã"""
        return sum(item["price"] for item in self.cart)
    
    def add_sale(self, items, cash_amount=0, cashless_amount=0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        sale = {
            "id": len(self.sales) + 1,
            "items": items.copy(),
            "cash_amount": cash_amount,
            "cashless_amount": cashless_amount,
            "time": datetime.datetime.now(),
            "total": cash_amount + cashless_amount
        }
        self.sales.append(sale)
    
    def save_backup(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã"""
        try:
            if self.is_open:
                backup_data = {
                    'is_open': self.is_open,
                    'sales': self.sales,
                    'exchange_cash': self.exchange_cash,
                    'open_time': self.open_time.isoformat() if self.open_time else None,
                    'last_backup': datetime.datetime.now().isoformat()
                }
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs(Config.BACKUP_FOLDER, exist_ok=True)
                
                backup_file = f"{Config.BACKUP_FOLDER}/session_backup.json"
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2, default=str)
                
                logger.info("‚úÖ –ë—ç–∫–∞–ø —Å–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def load_backup(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            backup_file = f"{Config.BACKUP_FOLDER}/session_backup.json"
            if os.path.exists(backup_file):
                with open(backup_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                if backup_data.get('open_time'):
                    backup_data['open_time'] = datetime.datetime.fromisoformat(backup_data['open_time'])
                
                logger.info("‚úÖ –ë—ç–∫–∞–ø —Å–º–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω")
                return backup_data
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—ç–∫–∞–ø–∞: {e}")
        
        return None
    
    def restore_session(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±—ç–∫–∞–ø–∞"""
        backup_data = self.load_backup()
        if backup_data and backup_data.get('is_open'):
            self.is_open = True
            self.sales = backup_data.get('sales', [])
            self.exchange_cash = backup_data.get('exchange_cash', 0)
            self.open_time = backup_data.get('open_time')
            
            last_backup = backup_data.get('last_backup', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞ –æ—Ç {last_backup}")
            return True
        
        return False
    
    def delete_backup(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ (–ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã)"""
        try:
            backup_file = f"{Config.BACKUP_FOLDER}/session_backup.json"
            if os.path.exists(backup_file):
                os.remove(backup_file)
                logger.info("üóëÔ∏è –ë—ç–∫–∞–ø —Å–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        
        return False
    
    async def start_auto_save(self, interval_seconds=120):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        async def auto_save_loop():
            while True:
                await asyncio.sleep(interval_seconds)
                if self.is_open:
                    self.save_backup()
                    logger.debug("üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        self.auto_save_task = asyncio.create_task(auto_save_loop())
        logger.info(f"üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds}—Å–µ–∫)")
    
    def stop_auto_save(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        if self.auto_save_task:
            self.auto_save_task.cancel()
            logger.info("üõë –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

session = SessionManager()

# ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ======
CATEGORIES_IDS = {}
ITEMS_MAPPING = {}

for i, (category_name, items) in enumerate(CATEGORIES_DATA.items()):
    cat_id = f"cat{i}"
    CATEGORIES_IDS[cat_id] = category_name
    
    for j, (item_name, price) in enumerate(items.items()):
        item_id = f"item{i}_{j}"
        ITEMS_MAPPING[item_id] = {
            "name": item_name,
            "price": price,
            "category": category_name
        }

session.item_mapping = ITEMS_MAPPING

# ====== –ò–ù–õ–ê–ô–ù –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def get_main_kb():
    buttons = [
        [InlineKeyboardButton(text="üé¨ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="open_shift")],
        [InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–∞–∂–∞", callback_data="start_sale")],
        [InlineKeyboardButton(text="üíµ –í–Ω–µ—Å—Ç–∏ —Ä–∞–∑–º–µ–Ω", callback_data="add_exchange")],
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç", callback_data="show_report")],
        [InlineKeyboardButton(text="üìã –ê—Ä—Ö–∏–≤ —Å–º–µ–Ω", callback_data="session_archive")],
    ]
    if Config.ADMIN_USERNAME:
        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç", callback_data="refund_menu")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="close_shift")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_categories_kb():
    buttons = []
    for cat_id, cat_name in CATEGORIES_IDS.items():
        buttons.append([InlineKeyboardButton(text=cat_name, callback_data=f"cat_{cat_id}")])
    buttons.append([InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_items_kb(category_id: str):
    if category_id not in CATEGORIES_IDS:
        return get_categories_kb()
    
    category_name = CATEGORIES_IDS[category_id]
    buttons = []
    
    for item_id, item_data in ITEMS_MAPPING.items():
        if item_data["category"] == category_name:
            if item_data["price"] == "custom":
                price_display = "‚ö° –ó–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É"
            elif item_data["price"] == 0:
                price_display = "–ë–ï–°–ü–õ–ê–¢–ù–û"
            else:
                price_display = f"{format_currency(item_data['price'])}"
                
            buttons.append([InlineKeyboardButton(
                text=f"{item_data['name']} - {price_display}", 
                callback_data=f"item_{item_id}"
            )])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    buttons.append([InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cart_kb():
    buttons = [
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="payment_cash")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data="payment_card")],
        [InlineKeyboardButton(text="üí± –°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data="payment_mixed")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data="remove_items")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_categories")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_remove_items_kb():
    buttons = []
    for i, item in enumerate(session.cart, 1):
        price_display = "–ë–ï–°–ü–õ–ê–¢–ù–û" if item["price"] == 0 else f"{format_currency(item['price'])}"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå {i}. {item['item']} - {price_display}", 
                callback_data=f"remove_{i-1}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="show_cart")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_report_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–µ–∫–∞–º", callback_data="report_receipts")],
        [InlineKeyboardButton(text="üìà –û—Ç—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º", callback_data="report_metrics")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_refund_kb():
    buttons = []
    for sale in session.sales[-20:]:
        time_str = sale["time"].strftime("%H:%M") if isinstance(sale["time"], datetime.datetime) else sale["time"][11:16]
        buttons.append([
            InlineKeyboardButton(
                text=f"üßæ –ß–µ–∫ #{sale['id']} ({time_str}) - {format_currency(sale['total'])}",
                callback_data=f"refund_{sale['id']}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_session_archive_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Å–º–µ–Ω"""
    sessions = get_closed_sessions()
    buttons = []
    for session_data in sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–º–µ–Ω
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÖ {session_data['display_date']}",
                callback_data=f"archive_{session_data['filename']}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ====== –§–£–ù–ö–¶–ò–ò –û–¢–ß–ï–¢–û–í ======
def build_combined_report() -> str:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç: –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    total_cash_sales = sum(sale["cash_amount"] for sale in session.sales)
    total_cashless = sum(sale["cashless_amount"] for sale in session.sales)
    total_revenue = total_cash_sales + total_cashless
    total_items = sum(len(sale["items"]) for sale in session.sales)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    for sale in session.sales:
        for item in sale["items"]:
            category = item["category"]
            item_name = item["item"]
            price = item["price"]
            
            if category not in category_stats:
                category_stats[category] = {"items": {}, "total_count": 0, "total_revenue": 0}
            
            if item_name not in category_stats[category]["items"]:
                category_stats[category]["items"][item_name] = {"count": 0, "revenue": 0}
            
            category_stats[category]["items"][item_name]["count"] += 1
            category_stats[category]["items"][item_name]["revenue"] += price
            category_stats[category]["total_count"] += 1
            category_stats[category]["total_revenue"] += price
    
    report_text = f"""üìä –û–ë–©–ò–ô –û–¢–ß–Å–¢ –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò

–ê—Å—Ç–∞–Ω–∞, ¬´–ö–æ—Å–º–æ–ø–∞—Ä–∫ 01¬ª
{datetime.datetime.now().strftime('–°–µ–≥–æ–¥–Ω—è %d.%m.%Y')}
–° 10:00 –¥–æ {datetime.datetime.now().strftime('%H:%M')}

üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {format_currency(total_cash_sales)}
üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ: {format_currency(total_cashless)}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(total_revenue)}
üíµ –†–∞–∑–º–µ–Ω: {format_currency(session.exchange_cash)}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {len(session.sales)}
üõí –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_items} —à—Ç.

üì¶ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:
"""
    
    for category, stats in sorted(category_stats.items()):
        report_text += f"\n‚ñ∂ {category}:\n"
        report_text += f"   üìä –ü–æ–∑–∏—Ü–∏–π: {stats['total_count']} —à—Ç.\n"
        report_text += f"   üí∞ –í—ã—Ä—É—á–∫–∞: {format_currency(stats['total_revenue'])}\n"
        
        for item_name, item_data in sorted(stats["items"].items()):
            if item_data['revenue'] == 0:
                report_text += f"   ‚Ä¢ {item_name}: {item_data['count']} —à—Ç. (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
            else:
                avg_price = item_data['revenue'] / item_data['count']
                report_text += f"   ‚Ä¢ {item_name}: {item_data['count']} —à—Ç. √ó {format_currency(avg_price)} = {format_currency(item_data['revenue'])}\n"
    
    return report_text

def build_metrics_report() -> str:
    """–û—Ç—á–µ—Ç –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–∂–∞–º (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã)
    total_people = 0
    total_online_combo = 0
    total_invitations = 0
    total_partners = 0
    total_bloggers = 0
    
    # –í—ã—Ä—É—á–∫–∞ –ø–æ —Ç–∏–ø–∞–º (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã)
    –¥–æ–ø—ã_revenue = 0
    –º–∞–≥–∞–∑–∏–Ω_revenue = 0
    
    # –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ - —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π, –∫—É–ø–∏–≤—à–∏—Ö —á—Ç–æ-—Ç–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    –º–∞–≥–∞–∑–∏–Ω_–ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ = 0
    
    for sale in session.sales:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —á–µ–∫–µ —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
        has_shop_items = any(item["category"] in ["üìù –î—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏", "üìù –°–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"] for item in sale["items"])
        
        for item in sale["items"]:
            item_name = item["item"]
            price = item["price"]  # –£–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            category = item["category"]
            
            # –ü–æ–¥—Å—á–µ—Ç –ª—é–¥–µ–π (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏)
            if item_name in PEOPLE_ITEMS and price >= 0:
                total_people += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–Ω–ª–∞–π–Ω –∫–æ–º–±–æ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if item_name in ONLINE_COMBO_ITEMS and price >= 0:
                total_online_combo += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if item_name in INVITATION_ITEMS and price >= 0:
                total_invitations += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if item_name == "–ü–∞—Ä—Ç–Ω—ë—Ä" and price >= 0:
                total_partners += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –±–ª–æ–≥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if item_name == "–ë–ª–æ–≥–µ—Ä" and price >= 0:
                total_bloggers += 1
            
            # –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–´–†–£–ß–ö–ò (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ, –≤–∫–ª—é—á–∞—è –≤–æ–∑–≤—Ä–∞—Ç—ã)
            if category in ["üìç –õ–æ–∫–∞—Ü–∏–∏", "üçø –ö–æ–º–±–æ"]:
                –¥–æ–ø—ã_revenue += price
            elif category in ["üìù –î—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏", "üìù –°–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"]:
                –º–∞–≥–∞–∑–∏–Ω_revenue += price
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –º–∞–≥–∞–∑–∏–Ω–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                if price > 0 and has_shop_items:
                    –º–∞–≥–∞–∑–∏–Ω_–ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ += 1
    
    # –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ (—É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç—ã)
    total_revenue = sum(sale['total'] for sale in session.sales)
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤
    total_dops_magazin = –¥–æ–ø—ã_revenue + –º–∞–≥–∞–∑–∏–Ω_revenue
    avg_check_total = total_dops_magazin / total_people if total_people > 0 else 0
    avg_check_shop = –º–∞–≥–∞–∑–∏–Ω_revenue / –º–∞–≥–∞–∑–∏–Ω_–ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ if –º–∞–≥–∞–∑–∏–Ω_–ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ > 0 else 0
    
    report_text = f"""üìà –û–¢–ß–Å–¢ –ü–û –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú

–ê—Å—Ç–∞–Ω–∞, ¬´–ö–æ—Å–º–æ–ø–∞—Ä–∫ 01¬ª
{datetime.datetime.now().strftime('–°–µ–≥–æ–¥–Ω—è %d.%m.%Y')}
–° 10:00 –¥–æ {datetime.datetime.now().strftime('%H:%M')}

üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: {total_people} —á–µ–ª.
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_currency(total_revenue)}
üéØ –í—ã—Ä—É—á–∫–∞ –¥–æ–ø–æ–≤ + –º–∞–≥–∞–∑–∏–Ω: {format_currency(total_dops_magazin)}
üõçÔ∏è –í—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {format_currency(–º–∞–≥–∞–∑–∏–Ω_revenue)}
üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(avg_check_total)}
üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞: {format_currency(avg_check_shop)}

üì± –û–Ω–ª–∞–π–Ω –∫–æ–º–±–æ: {total_online_combo} —à—Ç.
üé´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ: {total_invitations} —à—Ç.
ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã: {total_partners} —à—Ç.
üì∏ –ë–ª–æ–≥–µ—Ä—ã: {total_bloggers} —à—Ç.
"""
    
    return report_text

def build_receipts_report() -> str:
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–µ–∫–∞–º —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã"""
    if not session.sales:
        return "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–µ–∫–∞–º\n\nüì≠ –ß–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    report_text = "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–µ–∫–∞–º\n\n"
    for i, sale in enumerate(session.sales, 1):
        time_str = sale["time"].strftime("%H:%M:%S")
        payment_type = ""
        if sale["cash_amount"] > 0 and sale["cashless_amount"] > 0:
            payment_type = f"üí± –°–º–µ—à–∞–Ω–Ω–∞—è ({format_currency(sale['cash_amount'])} –Ω–∞–ª + {format_currency(sale['cashless_amount'])} –±–µ–∑–Ω–∞–ª)"
        elif sale["cash_amount"] > 0:
            payment_type = "üíµ –ù–∞–ª–∏—á–Ω—ã–µ"
        elif sale["cashless_amount"] > 0:
            payment_type = "üí≥ –ö–∞—Ä—Ç–∞"
        else:
            payment_type = "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        
        report_text += f"üßæ –ß–µ–∫ #{i} ({time_str})\n"
        report_text += f"   {payment_type}\n"
        report_text += f"   üí∞ –°—É–º–º–∞: {format_currency(sale['total'])}\n"
        report_text += f"   üì¶ –ü–æ–∑–∏—Ü–∏–π: {len(sale['items'])} —à—Ç.\n"
        
        for j, item in enumerate(sale["items"], 1):
            price_display = "–ë–ï–°–ü–õ–ê–¢–ù–û" if item["price"] == 0 else f"{format_currency(item['price'])}"
            report_text += f"      {j}. {item['item']} - {price_display}\n"
        report_text += "\n"
    
    return report_text

# ====== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb()
    )

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ======
@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: CallbackQuery):
    await safe_edit_message(
        callback.message,
        "üé≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        get_main_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "open_shift")
async def open_shift_handler(callback: CallbackQuery):
    if session.is_open:
        await callback.answer("‚ùå –°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
        return
    
    session.is_open = True
    session.sales = []
    session.cart = []
    session.open_time = datetime.datetime.now()
    session.exchange_cash = 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã
    session.save_backup()
    
    await safe_edit_message(
        callback.message,
        "‚úÖ –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        get_main_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "add_exchange")
async def add_exchange_handler(callback: CallbackQuery, state: FSMContext):
    if not session.is_open:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É!", show_alert=True)
        return
    
    await callback.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–∑–º–µ–Ω–∞:")
    await state.set_state(SessionStates.waiting_exchange_cash)
    await callback.answer()

@dp.message(SessionStates.waiting_exchange_cash)
async def process_exchange_cash(message: types.Message, state: FSMContext):
    is_valid, exchange_amount = validate_amount(message.text)
    if not is_valid:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    session.exchange_cash = exchange_amount
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞–∑–º–µ–Ω–∞
    session.save_backup()
    
    await message.answer(
        f"‚úÖ –†–∞–∑–º–µ–Ω –≤–Ω–µ—Å–µ–Ω!\nüíµ –°—É–º–º–∞: {format_currency(exchange_amount)}",
        reply_markup=get_main_kb()
    )
    await state.clear()

@dp.callback_query(F.data == "start_sale")
async def start_sale_handler(callback: CallbackQuery):
    if not session.is_open:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É!", show_alert=True)
        return
    
    await safe_edit_message(
        callback.message,
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        get_categories_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories_handler(callback: CallbackQuery):
    await safe_edit_message(
        callback.message,
        "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        get_categories_kb()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("cat_"))
async def category_handler(callback: CallbackQuery):
    category_id = callback.data.replace("cat_", "")
    if category_id not in CATEGORIES_IDS:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    category_name = CATEGORIES_IDS[category_id]
    await safe_edit_message(
        callback.message,
        f"üìÅ {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        get_items_kb(category_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("item_"))
async def item_handler(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.replace("item_", "")
    if item_id not in ITEMS_MAPPING:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    item_data = ITEMS_MAPPING[item_id]
    
    if item_data["price"] == "custom":
        session.custom_item_temp = {"category": item_data["category"]}
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
        await state.set_state(SessionStates.waiting_custom_name)
        await callback.answer()
        return
    
    session.cart.append({
        "item": item_data["name"],
        "price": item_data["price"],
        "category": item_data["category"],
        "item_id": item_id
    })
    
    cart_count = len(session.cart)
    cart_total = session.get_cart_total()
    
    price_display = "–ë–ï–°–ü–õ–ê–¢–ù–û" if item_data["price"] == 0 else f"{format_currency(item_data['price'])}"
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item_data['name']} - {price_display}\n\n"
        f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_count} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å—É–º–º—É {format_currency(cart_total)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        get_categories_kb()
    )
    await callback.answer(f"‚úÖ {item_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–†–ó–ò–ù–´ ======
@dp.callback_query(F.data == "show_cart")
async def show_cart_handler(callback: CallbackQuery):
    if not session.cart:
        await safe_edit_message(
            callback.message,
            "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõç –ö –ø–æ–∫—É–ø–∫–∞–º", callback_data="back_to_categories")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for i, item in enumerate(session.cart, 1):
        price_display = "–ë–ï–°–ü–õ–ê–¢–ù–û" if item["price"] == 0 else f"{format_currency(item['price'])}"
        cart_text += f"{i}. {item['item']} - {price_display}\n"
        total += item["price"]
    
    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: {format_currency(total)}"
    
    await safe_edit_message(callback.message, cart_text, get_cart_kb())
    await callback.answer()

@dp.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    session.cart.clear()
    await safe_edit_message(
        callback.message,
        "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
        get_categories_kb()
    )
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.callback_query(F.data == "remove_items")
async def remove_items_handler(callback: CallbackQuery):
    if not session.cart:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    await safe_edit_message(
        callback.message,
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        get_remove_items_kb()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_"))
async def remove_single_item_handler(callback: CallbackQuery):
    try:
        index = int(callback.data.replace("remove_", ""))
        if 0 <= index < len(session.cart):
            removed_item = session.cart.pop(index)
            await callback.answer(f"‚ùå {removed_item['item']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            
            if session.cart:
                await safe_edit_message(
                    callback.message,
                    "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    get_remove_items_kb()
                )
            else:
                await safe_edit_message(
                    callback.message,
                    "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                    get_categories_kb()
                )
        else:
            await callback.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ê–°–¢–û–ú–ù–´–• –ü–û–ó–ò–¶–ò–ô ======
@dp.message(SessionStates.waiting_custom_name)
async def process_custom_name(message: types.Message, state: FSMContext):
    custom_name = message.text.strip()
    if not custom_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    session.custom_item_temp["name"] = custom_name
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(SessionStates.waiting_custom_price)

@dp.message(SessionStates.waiting_custom_price)
async def process_custom_price(message: types.Message, state: FSMContext):
    is_valid, price = validate_amount(message.text)
    if not is_valid:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    session.cart.append({
        "item": session.custom_item_temp["name"],
        "price": price,
        "category": "üìù –°–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
        "item_id": "custom"
    })
    
    cart_count = len(session.cart)
    cart_total = session.get_cart_total()
    
    await message.answer(
        f"‚úÖ –°–≤–æ–±–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {session.custom_item_temp['name']}\n"
        f"üíµ –¶–µ–Ω–∞: {format_currency(price)}\n\n"
        f"üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {cart_count} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å—É–º–º—É {format_currency(cart_total)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_kb()
    )
    
    session.custom_item_temp = None
    await state.clear()

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ü–õ–ê–¢–´ ======
@dp.callback_query(F.data.in_(["payment_cash", "payment_card"]))
async def payment_handler(callback: CallbackQuery):
    if not session.cart:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    total = session.get_cart_total()
    pay_type = "–Ω–∞–ª–∏—á–Ω—ã–µ" if callback.data == "payment_cash" else "–∫–∞—Ä—Ç–∞"
    
    if pay_type == "–Ω–∞–ª–∏—á–Ω—ã–µ":
        session.add_sale(session.cart, cash_amount=total)
    else:
        session.add_sale(session.cart, cashless_amount=total)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
    session.save_backup()
    
    if total == 0:
        await safe_edit_message(
            callback.message,
            f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüì¶ –ü–æ–∑–∏—Ü–∏–π: {len(session.cart)}",
            get_main_kb()
        )
    else:
        await safe_edit_message(
            callback.message,
            f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüí≥ –°–ø–æ—Å–æ–±: {pay_type}\nüí∞ –°—É–º–º–∞: {format_currency(total)}\nüì¶ –ü–æ–∑–∏—Ü–∏–π: {len(session.cart)}",
            get_main_kb()
        )
    
    session.cart.clear()
    await callback.answer()

@dp.callback_query(F.data == "payment_mixed")
async def payment_mixed_handler(callback: CallbackQuery, state: FSMContext):
    if not session.cart:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    total = session.get_cart_total()
    if total == 0:
        await callback.answer("‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–ø–ª–∞—Ç—ã!", show_alert=True)
        return
    
    session.mixed_amount = total
    await callback.message.answer(
        f"üí± –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ (–∏–∑ {format_currency(total)}):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_cart")]
        ])
    )
    await state.set_state(SessionStates.waiting_mixed_cash)
    await callback.answer()

@dp.message(SessionStates.waiting_mixed_cash)
async def process_mixed_cash(message: types.Message, state: FSMContext):
    is_valid, cash_amount = validate_amount(message.text)
    if not is_valid:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    if cash_amount > session.mixed_amount:
        await message.answer(f"‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {format_currency(session.mixed_amount)}. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    cashless_amount = session.mixed_amount - cash_amount
    session.add_sale(session.cart, cash_amount, cashless_amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
    session.save_backup()
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüí± –°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞\nüíµ –ù–∞–ª–∏—á–Ω—ã–µ: {format_currency(cash_amount)}\nüí≥ –ö–∞—Ä—Ç–∞: {format_currency(cashless_amount)}\nüí∞ –í—Å–µ–≥–æ: {format_currency(session.mixed_amount)}",
        reply_markup=get_main_kb()
    )
    
    session.cart.clear()
    session.mixed_amount = None
    await state.clear()

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ó–í–†–ê–¢–û–í ======
@dp.callback_query(F.data == "refund_menu")
async def refund_menu_handler(callback: CallbackQuery):
    if not session.is_open:
        await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
        return
    
    if not session.sales:
        await callback.answer("üì≠ –ß–µ–∫–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Ç", show_alert=True)
        return
    
    await safe_edit_message(
        callback.message,
        "‚Ü©Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        get_refund_kb()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("refund_"))
async def refund_sale_handler(callback: CallbackQuery):
    try:
        sale_id = int(callback.data.replace("refund_", ""))
        # –ü–æ–∏—Å–∫ —á–µ–∫–∞ –ø–æ ID
        sale_to_refund = None
        for sale in session.sales:
            if sale['id'] == sale_id:
                sale_to_refund = sale
                break
        
        if not sale_to_refund:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç (–¥–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏)
        refund_items = []
        for item in sale_to_refund['items']:
            refund_items.append({
                'item': f"‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: {item['item']}",
                'price': -item['price'],
                'category': item['category'],
                'item_id': item.get('item_id', 'refund')
            })
        
        session.add_sale(
            refund_items, 
            cash_amount=-sale_to_refund['cash_amount'],
            cashless_amount=-sale_to_refund['cashless_amount']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
        session.save_backup()
        
        await safe_edit_message(
            callback.message,
            f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüßæ –ß–µ–∫ #{sale_id}\nüí∞ –°—É–º–º–∞: {format_currency(sale_to_refund['total'])}",
            get_main_kb()
        )
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞!", show_alert=True)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ß–ï–¢–û–í ======
@dp.callback_query(F.data == "show_report")
async def show_report_handler(callback: CallbackQuery):
    if not session.is_open:
        await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –∏ —á–µ–∫–∞–º (–±–µ–∑ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞)
    report_text = build_metrics_report()
    await safe_edit_message(callback.message, report_text, get_report_kb())
    session.last_report_type = "metrics"
    await callback.answer()

@dp.callback_query(F.data == "report_receipts")
async def report_receipts_handler(callback: CallbackQuery):
    if session.last_report_type == "receipts":
        await callback.answer("‚ÑπÔ∏è –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç", show_alert=True)
        return
    
    report_text = build_receipts_report()
    await safe_edit_message(callback.message, report_text, get_report_kb())
    session.last_report_type = "receipts"
    await callback.answer()

@dp.callback_query(F.data == "report_metrics")
async def report_metrics_handler(callback: CallbackQuery):
    if session.last_report_type == "metrics":
        await callback.answer("‚ÑπÔ∏è –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç", show_alert=True)
        return
    
    report_text = build_metrics_report()
    await safe_edit_message(callback.message, report_text, get_report_kb())
    session.last_report_type = "metrics"
    await callback.answer()

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–†–•–ò–í–ê –°–ú–ï–ù ======
@dp.callback_query(F.data == "session_archive")
async def session_archive_handler(callback: CallbackQuery):
    sessions = get_closed_sessions()
    if not sessions:
        await callback.answer("üì≠ –ê—Ä—Ö–∏–≤ —Å–º–µ–Ω –ø—É—Å—Ç", show_alert=True)
        return
    
    await safe_edit_message(
        callback.message,
        "üìã –ê—Ä—Ö–∏–≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–º–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        get_session_archive_kb()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("archive_"))
async def archive_session_handler(callback: CallbackQuery):
    filename = callback.data.replace("archive_", "")
    filepath = f"{Config.CLOSED_SESSIONS_FOLDER}/{filename}"
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=types.FSInputFile(filepath),
            caption=f"üìÑ –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ: {filename}"
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞", show_alert=True)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ö–†–´–¢–ò–Ø –°–ú–ï–ù–´ ======
@dp.callback_query(F.data == "close_shift")
async def close_shift_handler(callback: CallbackQuery):
    if not session.is_open:
        await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞!", show_alert=True)
        return
    
    await callback.message.answer("üìä –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã...")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã
    session_data = {
        'open_time': session.open_time,
        'close_time': datetime.datetime.now(),
        'combined_report': build_combined_report(),
        'metrics_report': build_metrics_report(),
        'receipts_report': build_receipts_report()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = save_session_report(session_data)
    
    if filename:
        # –£–¥–∞–ª—è–µ–º –±—ç–∫–∞–ø –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã
        session.delete_backup()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer_document(
            document=types.FSInputFile(filename),
            caption="üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ"
        )
        
        await callback.message.answer("‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞! –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª.", reply_markup=get_main_kb())
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞!", reply_markup=get_main_kb())
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É
    session.reset()
    await callback.answer()

# ====== GRACEFUL SHUTDOWN ======
async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    session.save_backup()
    session.stop_auto_save()
    await bot.session.close()
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±—ç–∫–∞–ø–∞
        session.restore_session()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await session.start_auto_save(interval_seconds=120)
        
        logger.info("–ë–æ—Ç –Ω–∞—á–∞–ª polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        asyncio.run(shutdown())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        asyncio.run(shutdown())